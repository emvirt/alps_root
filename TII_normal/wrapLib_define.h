/* Created By KUOS */

//#include <GLES2/gl2.h>
//#include <EGL/egl.h>

#define NORMAL_WORLD

// If this is defined, the program prints debugging messages
//#define WRAP_DEBUG

// If this is defined, the program measures comsumed time of several functions
//#define MEASURE_TIME

// Device name for communication between worlds
#define DEVICE_FILENAME	"/dev/mydev"

/*
 * Define common header size
 */
#define COMM_HEAD_ID_SIZE (sizeof(unsigned int))
#define COMM_HEAD_RETFLAG_SIZE (sizeof(unsigned int))
#define COMM_HEAD_LDATALEN_SIZE (sizeof(unsigned int))
#define COMM_HEAD_SIZE \
	(COMM_HEAD_ID_SIZE \
	+ COMM_HEAD_RETFLAG_SIZE \
	+ COMM_HEAD_LDATALEN_SIZE)

/*
 * Define buffer size
 */
#define MAX_BUF_SIZE 64 			// size of the default communication buffer
#define MAX_LDATA_SIZE 0x4000U			// size of the large data buffer
#define MAX_LDATA_SIZE_1M 0x100000U	// size of the large data buffer that is extended for textures
#define MAX_VERTEX_ARR_SIZE 448	// size of vertex array (512-64 bytes)
#define MAX_GL_BUFFER_SIZE 480		// counts of frame buffers generated by openGL library (512-32 bytes)
#define MAX_CONFIG_COUNT 256		// maximum number of configs

/*
 * Macros
 */
#ifdef WRAP_DEBUG
#define call_log(retVal)	printf("%s is called !!!\n", __func__)	// print debugging message
#else
#define call_log(retVal) ;
#endif

#define PARAM_SIZE(func) (PARAM_SIZE_##func)	//Find a pre-defined parameter size
#define init_header(hd_addr) memset(hd_addr, 0, COMM_HEAD_SIZE);	// Initialize a common header
#define func_ID(func) (ID_##func)		// Find a pre-defined function ID

#define init_msg(hd_addr) memset(hd_addr, 0, MAX_BUF_SIZE);	// Initialize a common header

/* 
 * Define ioctl commands
 */
#define IMMEDIATE_SEND_START 0
#define IMMEDIATE_SEND_STOP 1
#define GLOBAL_TIMER_START 3
#define GLOBAL_TIMER_STOP 4
#define GET_LOWER_TIME_CNT 5
#define GET_UPPER_TIME_CNT 6

/*
 * Structure for common header
 * Include a function ID, a return flag, and length of large data
 */
typedef struct struct_header {
	unsigned int funcID;
	unsigned int retFlag;
	unsigned int ldata_length;
} typ_common_hd;

/*
 * Define function IDs
 */
enum function_ID{
	ID_tzopen = 0,					
	ID_tzread,
	ID_tzwrite,
	ID_tzclose
	
};

enum return_type {
        RT_NONE = 0,
        RT_REQUEST,
        RT_RESPONSE
};	

/*
 * A list structure of memory spaces created by malloc
 * This list keeps pointers that is dynamically allocated, but not freed yet
 */
struct space_list {
	void *buf;
	struct space_list *next;
};

